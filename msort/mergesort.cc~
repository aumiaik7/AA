/*
*
*Ahamad Imtiaz Khan (001188188)
*Grad Student (MSc) 
*Quicksort with partitioning done sequntially
*how to run this program is mentioned inside howToRun.txt
*
*/

#include <iostream>
#include <cstdlib>
#include <string>
#include <sys/time.h>
#include <cilk/cilk.h>
#include <cilk/cilk_api.h>

void srand( unsigned seed ); 

using namespace std;

#define N 700000

//function for merging
void merge(long int[],long int[],int,int,int);
//function for sorting
void mergeSort(long int[],long int[],int,int);

int main (int argc, char *argv[])
{ 
	
	long int array1[N],array2[N];
	
	//this counter is used for displaying the data only
	int count;
	
	//start time and end time is used to get the time for quicksort operation
	struct timeval start,end;
	
	//Srand will seed the random number generator to prevent random numbers 
	//from being the same every time the program is executed and to allow more pseudorandomness
	srand( time(NULL) );
	
	//generate numbers randomly
	for (count=0 ; count<N ; count++ )
	{
		array1[count] = rand() % 100 + 1;
	}
	
	//default number of cores
	string numOfCores = "16";
	//get number of cores from command line argument
	if(argc == 2)
	{
		numOfCores = argv[1];
	}
	cout<<"There are "<<numWorkers<<" workers by default"<<endl);
	//set number of cores
	 __cilkrts_set_param("nworkers", numOfCores);
	//start time	
	gettimeofday(&start,NULL);
	//start main operation
	mergeSort(array1,array2,0,N-1);
	//end time	
	gettimeofday(&end,NULL);
	
	//display output
	for (count=0 ; count<N ; count++)
	{
		cout<<array1[count]<<" ";
	}
	
	//calculate the time needed for sorting in seconds
	double time = (stop.tv_sec+(double)stop.tv_usec/1000000) - (start.tv_sec+(double)start.tv_usec/1000000)	;	
	cout<<endl<<"Sorting done in "<<time<< " seconds"<<endl;
}

//merge sort
void mergeSort(long int arr1[],long int arr2[], int low, int high)
{
	int pivot;
	if(low<high)
	{
		//calculate pivot
		pivot=(low + high) / 2; 
		////recursion done in parallel		
		cilk_spawn 
		mergeSort(arr1,arr2,low,pivot);
		mergeSort(arr1,arr2,pivot+1,high);
		cilk_sync;
		//merge
		merge(arr1,arr2,low,pivot,high);
	}
}
  
//merging done sequentially    
void merge(long int arr1[], long int arr2[],int low,int pivot,int high)
{
	int h,i,j,k;
	h=low;
	i=low;
	j=pivot+1;

	while((h<=pivot) && (j<=high)){
		if(arr1[h]<=arr1[j])
		{
			arr2[i]=arr1[h];
			h++;
		}
		else
		{
			arr2[i]=arr1[j];
			j++;
		}
		i++;
	}	
	if(h>pivot)
	{	
		for(k=j; k<=high; k++)
		{
			arr2[i]=arr1[k];
			i++;
		}
	}
	else
	{
		for(k=h; k<=pivot; k++)
		{
			arr2[i]=arr1[k];
			i++;
		}
	}
	for(k=low; k<=high; k++)
		arr1[k]=arr2[k];
}

